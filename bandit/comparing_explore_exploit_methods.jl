include("EpsilonGreedy.jl")
include("Optimistic_initial_value.jl")
include("Ucb1.jl")
using Plots,LinearAlgebra
using .EpsilonGreedy,.Optimistic_initial_value,.Ucb1
pyplot() # Choose a backend
 # :pyplot
 # :unicodeplots
 # :plotly
 # :plotlyjs
 # :gr
 # :pgfplots
 # :inspectdr
 # :hdf5
mutable struct Bandit{T<:AbstractFloat}
    m::T
    m0::T
    lambda::T
    sum_x::T
    tau::T
    Bandit(m)=new{AbstractFloat}(m,0,1,0,1)
end

function pull(b::Bandit)
    return randn()+b.m
end

function sample(lambda,m0)
    return randn()/sqrt(lambda)+m0
end
function update!(b::Bandit,x::AbstractFloat)
    b.lambda+=1
    b.sum_x+=x
    b.m0=b.tau*b.sum_x/b.lambda
    nothing
end;

function run_experiment(m1::T, m2::T, m3::T, N::Integer) where {T<:AbstractFloat}
    bandits=[Bandit(m1),Bandit(m2),Bandit(m3)]
    data=Vector{Float64}(undef,N+1)
    for i in collect(1:N+1)
        j=argmax([sample(b.lambda,b.m0) for b in bandits])
        x=pull(bandits[j])
        update!(bandits[j],x)
        data[i]=x
    end
    cum_average=cumsum(data)./(collect(1:N+1))

    return cum_average
end

function main()
    eps=run_experiment_eps_greedy(1.0,2.0,3.0,100000)
    oiv=run_experiment_oiv(1.0,2.0,3.0,0.0,100000,10,1)
    ubc1=run_experiment_ucb1(1.0,2.0,3.0,0.0,100000,0,0,true)
    bayes=run_experiment(1.0,2.0,3.0,100000)
    p=Plots.plot(eps,label="eps_greedy",xscale=:log10,legend=:bottomright);
    Plots.plot!(p,oiv,label="Optimistic mean=10");
    Plots.plot!(p,ubc1,label="ubc1");
    Plots.plot!(p,bayes,label="bayesian");
end

@time main()
